#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from bintropy.__init__ import SUBLABELS
from pbox import *
from tinyscript import *


__script__      = "Executable manipulation tool"
__version__     = "1.2.3"
__doc__         = """
This tool aims to manipulate a single executable.
"""
__description__ = "Manipulate a single executable"
__examples__ = [
    "alter rename_sections program.exe",
    "plot --dpi 300 --format jpg program.exe",
    "show program.exe",
]


#TODO: disassemble, [readelf|readpe|readmo], fingerprint
if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", metavar="CMD", title="positional argument",
                                     help="command to be executed")
    alter = sparsers.add_parser("alter", help="alter the target executable with the given alteration")
    add_argument(alter, "executable", single=True)
    add_argument(alter, "alterations-set", "alteration")
    diff = sparsers.add_parser("diff", help="represent differences between two target executables")
    add_argument(diff, "executable", single=True)
    diff.add_argument("executable2", help="another executable file")
    feat = sparsers.add_parser("features", help="compute features of the target executable")
    add_argument(feat, "executable", "features-set", single=True)
    plot = sparsers.add_parser("plot", help="plot the target executable(s)")
    add_argument(plot, "executable", nargs="+", single=True)
    plot.add_argument("-l", "--label", nargs="*", action="extend", help="set the label(s) (keeps order)")
    plot.add_argument("-p", "--prefix", help="string to be prepended to the target filename")
    l = list(SUBLABELS.keys())
    plot.add_argument("-s", "--sublabel", default=l[-1], choices=l, help="label to be added under the filename")
    plot.add_argument("--scale", action="store_true", help="use the same scale when multiple executables are input")
    figure_options(plot)
    scan = sparsers.add_parser("scan", help="send the executable to VirusTotal for scanning")
    add_argument(scan, "executable")
    scan.add_argument("executables", nargs="*", help="executable files to compare with the reference file")
    scan.add_argument("-f", "--force", action="store_true", help="remove cached data for the target executable if any")
    add_argument(sparsers.add_parser("show", help="show information about the target executable"), "executable")
    initialize(noargs_action="usage")
    configure_logging(args.verbose)
    args.logger = logger
    # now execute
    if args.command == "features":
        Features.source = args.features_set
        Executable(args.executable).show(False, False, True)
    else:
        if args.command == "plot":
            e = args.executable
            if isinstance(e, list):
                if len(e) > 1:
                    getattr(Executable(e[0]), args.command)(executables=e[1:], **vars(args))
                    sys.exit(0)
                args.executable = e[0]
        getattr(Executable(args.executable), args.command)(**vars(args))

